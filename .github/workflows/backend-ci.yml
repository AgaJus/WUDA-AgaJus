name: backend-ci

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [master]
    paths:
      - "back-end/**"
  pull_request:
    paths:
      - "back-end/**"

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # TODO: Lintują kod, szukają podatności w kodzie

      # Pobranie kodu z repozytorium
      - name: Checkout repo
        uses: actions/checkout@v4

      # Analiza jakości i bezpieczeństwa kodu
      - name: Install lint & security tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 bandit safety

      # w kolejności co robi co:
      # liczba błędów na końcu
      # ignorowanie błędów zbyt długich linii (>79 znaków)
      # maksymalna złożoność funkcji to 10
      # dozwolona długość linii to 120 znaków
      # pokazuje się fragment kodu, w którym jest błąd
      # na końcu wyświetlane statystyki błędów
      - name: Lint code with Flake8
        run: |
          echo "Sprawdzam styl i błędy składniowe w backu..."
          cd back-end
          flake8 . --count --ignore=E501 --max-complexity=10 --max-line-length=120 --show-source --statistics || true

      # bandit analizuje rekurencyjnie (-r .) a -lll pokazuje tylko błędy o najwyższym poziomie ryzyka
      - name: Run security checks with Bandit
        run: |
          echo "Analizuję kod pod kątem podatności..."
          cd back-end
          bandit -r . -lll

      # -r ma za zadanie czytania pliku z listą zależności
      # || true pozwala przejść dalej nawet, jeśli safety znajdzie błędy ( czyli prościej -> nie przerywa pipeline’u)
      - name: Check dependencies vulnerabilities with Safety
        run: |
          echo "Sprawdzam zależności z requirements.txt..."
          safety check -r back-end/requirements.txt || true

      # Budowanie obrazu backendu z folderu /back-end

      # budują obrazy dockerowe (tak), przeprowadzają testy jednostkowe aplikacji (tak)
      # tu trzeba dopasować sleep (na razie jest git)
      - name: Build and start services
        run: |
          docker compose up -d --build backend postgres
          echo "Czekam aż backend i baza wystartują..."
          sleep 15

      - name: Unit tests inside container
        run: docker compose run --rm backend pytest -ra

      #sprawdza echa czy wszytko stoi
      # Mechanizm sprawdzający czy otrzymane wiaodmośći są poprawne (odpowiada za ot flaga -f)
      - name: Test liveness/readiness endpoints
        run: |
          echo "Testuję endpoint /liveness"
          curl -f http://localhost:8080/liveness
          echo "Testuję endpoint /readiness"
          curl -f http://localhost:8080/readiness

      # Login do GHCR przy użyciu GITHUB_TOKEN
      - name: Log in to GitHub Container Registry
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Push obrazu z wersjonowaniem i zachowaniem historii
      - name: Push Docker image to GHCR
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          IMAGE_NAME=ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')/backend
          TAG=${{ github.sha }}
          docker tag backend:latest $IMAGE_NAME:latest
          docker tag backend:latest $IMAGE_NAME:$TAG
          echo "Pushing image to GitHub Container Registry..."
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$TAG

      # sprzątanie
      - name: Stop containers
        if: always()
        run: docker compose stop
