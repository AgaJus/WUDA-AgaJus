name: frontend-ci

on:
  push:
    branches: [master]
    paths:
      - "front-end/**"
  pull_request:
    paths:
      - "front-end/**"

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Pobranie kodu z repozytorium
      - name: Checkout repo
        uses: actions/checkout@v4

      # Analiza jakości i bezpieczeństwa kodu 
      - name: Install lint & security tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 bandit safety

      # w kolejności co robi co:
      # liczba błędów na końcu
      # ignorowanie błędów zbyt długich linii (>79 znaków)
      # maksymalna złożoność funkcji to 10
      # dozwolona długość linii to 120 znaków
      # pokazuje się fragment kodu, w którym jest błąd
      # na końcu wyświetlane statystyki błędów
      - name: Lint code with Flake8
        run: |
          echo "Sprawdzam styl i błędy składniowe we froncie..."
          cd front-end
          flake8 . --count --ignore=E501 --max-complexity=10 --max-line-length=120 --show-source --statistics || true
            

      # bandit analizuje rekurencyjnie (-r .) a -lll pokazuje tylko błędy o najwyższym poziomie ryzyka
      - name: Run security checks with Bandit 
        run: |
          echo "Analizuję kod pod kątem podatności..."
          cd front-end
          bandit -r . -lll 

      # -r ma za zadanie czytania pliku z listą zależności
      # || true pozwala przejść dalej nawet, jeśli safety znajdzie błędy ( czyli prościej -> nie przerywa pipeline’u)
      - name: Check dependencies vulnerabilities with Safety
        run: |
          echo "Sprawdzam zależności z requirements.txt..."
          safety check -r front-end/requirements.txt || true


      # Budowanie obrazu Dockera dla frontendu
      - name: Build Docker image for frontend
        run: docker build -t frontend:latest ./front-end

      # Uruchomienie frontendu w kontenerze
      - name: Build and start frontend service
        run: |
          docker compose -f docker-compose.yaml up -d frontend
          echo "Czekam aż frontend wystartuje..."
          sleep 10

      # Testy jednostkowe frontendu 
      - name: Run frontend unit tests
        run: |
          docker compose run --rm frontend pytest -ra

      # Sprawdza czy frontend odpowiada (czy serwer po prostu odpowiada na porcie 8000)
      - name: Test frontend endpoint
        run: |
          echo "Testuję endpoint frontendu"
          curl -f http://localhost:8000 || exit 1

      # Jeżeli będzie wszystko poprawnie to wrzuca obraz do GHCR
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

      - name: Push Docker image to GHCR
        run: |
          IMAGE_NAME=ghcr.io/agatarafalowicz/wuda-agajus/frontend:latest
          docker tag frontend:latest $IMAGE_NAME
          echo "Wysyłam obraz do GitHub Container Registry..."
          docker push $IMAGE_NAME

      # Sprzątanie po zakończeniu działania
      - name: Stop and clean up
        if: always()
        run: docker compose down -v
